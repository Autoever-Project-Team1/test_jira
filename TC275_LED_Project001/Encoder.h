#ifndef ENCODER_H_
#define ENCODER_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "IfxPort.h"
#include "Bsp.h"

#define A               &MODULE_P33,0
#define B               &MODULE_P11,9

#define A2              &MODULE_P11,10
#define B2              &MODULE_P11,11

#define PI              3.141592
#define PPR             44
#define SAMPLETIME      0.001
#define GEAR_RATIO      90

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 typedef struct
{
         uint8 A_data;
         uint8 B_data;
         uint8 AB_data;
         uint8 AB_bef;
         int AB_Cnt;
         int AB_Cnt_bef;
         double rad_per_sec;
         int diffCnt;

}App_Encoder;

typedef struct
{
        double diffCnt;
        double diffCnt_bef;
        double LPF_rad_per_sec;
        double LPF_rad_per_sec_bef;
        double LPF_Deg;
        double alpha;

}App_LPF_Encoder;
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

extern App_Encoder g_Encoder;
extern App_LPF_Encoder g_LPF_Encoder;

extern App_Encoder g_Encoder2;
extern App_LPF_Encoder g_LPF_Encoder2;


void Encoder_Init(void);
void readEncoderTick(void);
void Conv_rad_per_sec(void);
double LPF(double previous_output, double input_signal, double cutoff_frequency, double Ts);



#endif /* ENCODER_H_ */
